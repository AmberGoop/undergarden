plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.97'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

repositories {
	mavenLocal()
}

version = project.undergarden_version
group = 'quek.undergarden'
base {
    archivesName = 'The_Undergarden-'+project.minecraft_version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data
    //mappings channel: mapping_channel, version: mapping_version
    //copyIdeResources = true
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	configureEach {
		workingDirectory project.file('run')
		systemProperty 'forge.logging.console.level', 'debug'
		systemProperty 'fml.earlyprogresswindow', 'false'
		systemProperty 'mixin.env.disableRefMap', 'true'

		modSource project.sourceSets.main
	}

	client {
		//taskName "Minecraft_Client_${project.minecraft_version}"
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
		programArguments.addAll '--username', secrets.getProperty("username")?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid")?: ''
	}

	server {
		//taskName "Minecraft_Server_${project.minecraft_version}"
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
		programArgument '--nogui'
	}

	gameTestServer {
		//taskName "Minecraft_GameTestServer_${project.minecraft_version}"
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
	}

	data {
		//taskName "Minecraft_Data_${project.minecraft_version}"
		programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'Jared\'s Maven' // JEI
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'Curseforge Maven' // Jade
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://modmaven.dev/"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neo_version}"

	// compile against the JEI API but do not include it at runtime
	compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
	// at runtime, use the full JEI jar for NeoForge
	runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    implementation "curse.maven:jade-324717:${project.jade_version}"
    //implementation "curse.maven:just-enough-effect-descriptions-jeed-532286:${project.jeed_version}"
    implementation "curse.maven:better-advancements-272515:${project.better_advancements_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

/*mixin {
    add sourceSets.main, "undergarden.refmap.json"
    config 'undergarden.mixins.json'
}*/

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
		minecraft_version   : minecraft_version, minecraft_version_range: "[1.20,1.21)",
		neo_version         : neo_version, neo_version_range: "[20,)",
		loader_version_range: "[20,)",
		mod_id              : mod_id, mod_name: 'The Undergarden', mod_license: 'MIT', mod_version: undergarden_version,
		mod_authors         : 'quek', mod_description: 'Deep underground, a forgotten land awaits.',
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml']) {
		expand replaceProperties + [project: project]
	}
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
